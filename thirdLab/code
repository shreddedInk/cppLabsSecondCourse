#include <iostream>

// Абстрактный класс "Список"
template <typename T>
class List {
public:
    virtual void insert(T value) = 0;
    virtual void insertAt(T value, class Iterator& it) = 0;
    virtual void removeAt(class Iterator& it) = 0;
    virtual class Iterator find(T value) = 0;
    virtual bool isEmpty() const = 0;
    virtual int size() const = 0;
    virtual void clear() = 0;
    virtual class Iterator getIterator() = 0;
    virtual ~List() {}
};

// Реализация закольцованного списка с буферным элементом
template <typename T>
class CircularList : public List<T> {
private:
    struct Node {
        T data;
        Node* prev;
        Node* next;
        Node(T value = T()) : data(value), prev(this), next(this) {}
    };
    Node* buffer;
    int count;

public:
    // Конструкторы
    CircularList() : buffer(new Node()), count(0) {}

    CircularList(const CircularList& other) : CircularList() {
        for (Node* cur = other.buffer->next; cur != other.buffer; cur = cur->next) {
            insert(cur->data);
        }
    }

    CircularList(CircularList&& other) noexcept : buffer(other.buffer), count(other.count) {
        other.buffer = new Node();
        other.count = 0;
    }

    CircularList& operator=(const CircularList& other) {
        if (this != &other) {
            clear();
            for (Node* cur = other.buffer->next; cur != other.buffer; cur = cur->next) {
                insert(cur->data);
            }
        }
        return *this;
    }

    CircularList& operator=(CircularList&& other) noexcept {
        if (this != &other) {
            clear();
            delete buffer;
            buffer = other.buffer;
            count = other.count;
            other.buffer = new Node();
            other.count = 0;
        }
        return *this;
    }

    void insert(T value) override {
        insertAt(value, getIterator());
    }

    void insertAt(T value, class Iterator& it) override {
        Node* newNode = new Node(value);
        Node* pos = it.current;
        newNode->prev = pos->prev;
        newNode->next = pos;
        pos->prev->next = newNode;
        pos->prev = newNode;
        count++;
    }

    void removeAt(class Iterator& it) override {
        if (isEmpty() || it.current == buffer) return;
        Node* toDelete = it.current;
        it.current = toDelete->next;
        toDelete->prev->next = toDelete->next;
        toDelete->next->prev = toDelete->prev;
        delete toDelete;
        count--;
    }

    class Iterator find(T value) override {
        Iterator it = getIterator();
        while (it.hasNext()) {
            if (it.currentValue() == value) return it;
            it.next();
        }
        return Iterator(buffer, buffer); // Элемент не найден
    }

    bool isEmpty() const override {
        return count == 0;
    }

    int size() const override {
        return count;
    }

    void clear() override {
        while (!isEmpty()) removeAt(getIterator());
    }

    ~CircularList() {
        clear();
        delete buffer;
    }

    // Внутренний класс итератора
    class Iterator {
    private:
        Node* current;
        Node* buffer;
    public:
        Iterator(Node* start, Node* buffer) : current(start), buffer(buffer) {}
        void begin() { current = buffer->next; }
        bool hasNext() const { return current != buffer; }
        void next() { if (hasNext()) current = current->next; }
        T currentValue() const { return current->data; }
        friend class CircularList<T>;
    };

    Iterator getIterator() override { return Iterator(buffer->next, buffer); }
};

int main() {
    CircularList<int> list;
    list.insert(10);
    list.insert(20);
    list.insert(30);
    
    auto it = list.getIterator();
    it.begin();
    while (it.hasNext()) {
        std::cout << it.currentValue() << " ";
        it.next();
    }
    return 0;
}
